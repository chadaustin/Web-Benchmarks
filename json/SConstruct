import os

def rapidjson(env):
    env.AppendUnique(CPPPATH=['third-party/rapidjson-1.1.0/include'])

def yajl(env):
    env.AppendUnique(
        CPPPATH=['third-party/yajl-f4b2b1a/include'],
        LIBPATH=['#/built/libraries'])

def vjson(env):
    env.AppendUnique(
        CPPPATH=['third-party/vjson-f571bb097ca3'],
        LIBPATH=['#/built/libraries'])

def sajson(env):
    env.AppendUnique(
        CPPPATH=['third-party/sajson'])

def jansson(env):
    env.AppendUnique(
        CPPPATH=['third-party/jansson-2.4/src'])

def pjson(env):
    env.AppendUnique(
        CPPPATH=['third-party/pjson'])

def gcc(env):
    env['CC'] = 'gcc'
    env['CXX'] = 'g++'
    env['LINK'] = 'g++'

def clang(env):
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'
    env['LINK'] = 'clang++'

env = Environment(
    ENV=os.environ,
    CCFLAGS=['-g', '-O2', '-fno-exceptions'],
    LINKFLAGS=['-O2'],
    CPPDEFINES=['NDEBUG'],
    CXXFLAGS=['-std=c++11', '-Wall'])
rapidjson(env)
yajl(env)
vjson(env)
sajson(env)
jansson(env)
pjson(env)

builds = [
    ('gcc', [gcc]),
    ('clang', [clang]),
]

for name, tools in builds:
    e = env.Clone(tools=tools)
    e.Append(BUILDDIR=os.path.join('build', name))
    e.SConscript('SConscript', variant_dir='$BUILDDIR', duplicate=0, exports={'env': e})
